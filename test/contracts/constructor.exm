defmodule Test.Constructor do
  alias Blockchain.Storage
  alias Blockchain.Types

  @int_test [type: Types.Int256.t()]
  @owner [type: Types.Address.t()]
  @contract_symbol [type: Types.String.t()]
  @mapping_test_int16 [type: %{Types.Bytes16.t() => %{Types.Int256.t() => Types.Int16.t()}}]

  @spec constructor(Types.Int256.t(), Types.String.t(), Types.Bytes16.t(), Types.Int256.t(), Types.Int16.t()) :: nil
  def constructor(a, symbol, key_a, key_b, mapping_value) do
    Storage.store(@owner, Blockchain.tx_origin())
    Storage.store(@int_test, a)
    Storage.store(@contract_symbol, symbol)
    Storage.store(@mapping_test_int16[key_a][key_b], mapping_value)
  end

  @spec get_int_test() :: Types.Int256.t()
  def get_int_test() do
    Storage.get(@int_test)
  end

  @spec get_owner() :: Types.Address.t()
  def get_owner() do
    Storage.get(@owner)
  end

  @spec get_contract_symbol() :: Types.String.t()
  def get_contract_symbol() do
    Storage.get(@contract_symbol)
  end

  @spec get_mapping_test_int16(Types.Bytes16.t(), Types.Int256.t()) :: Types.Int16.t()
  def get_mapping_test_int16(key_a, key_b) do
    Storage.get(@mapping_test_int16[key_a][key_b])
  end
end
