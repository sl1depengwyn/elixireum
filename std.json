{"sources":{"contracts/in.yul":{"content":"object \"contract\" {\n  code {\n    datacopy(0, dataoffset(\"runtime\"), datasize(\"runtime\"))\nreturn(0, datasize(\"runtime\"))\n\n  }\n  object \"runtime\" {\n    code {\n      let method_id := shr(224, calldataload(0x0))\nswitch method_id\ncase 0xb79cd456 {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _int_test := memory_offset$\n  mstore8(memory_offset$, 67)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(0, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 32)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := store_int_test(_int_test)\n\n  return(0, 0)\n\n}\ncase 0x0c8f9aa2 {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n\n  let return_value$ := get_int_test()\n\n  let processed_return_value$ := msize()\nlet processed_return_value_init$ := processed_return_value$\nlet where_to_store_head$ := processed_return_value$\nlet where_to_store_head_init$ := where_to_store_head$\nswitch byte(0, mload(return_value$))\ncase 67 {}\ndefault {\n  let str1656102$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 27)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722072657475726e2076616c75650000000000)\noffset$ := add(offset$, 27)\n\n\n\nlet $err_message_ptr1656102 := add(1, str1656102$)\nlet $err_message_size1656102 := mload($err_message_ptr1656102)\n$err_message_ptr1656102 := add($err_message_ptr1656102, 32)\nrevert($err_message_ptr1656102, $err_message_size1656102)\n\n}\n\n\nreturn_value$ := add(return_value$, 1)\nmstore(where_to_store_head$, sar(0, mload(return_value$)))\nreturn_value$ := add(return_value$, 32)\nwhere_to_store_head$ := add(where_to_store_head$, 32)\n\nprocessed_return_value$ := add(processed_return_value$, 32)\nreturn(processed_return_value_init$, sub(processed_return_value$, processed_return_value_init$))\n\n}\ncase 0x1d4ac9d0 {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _address := memory_offset$\n  mstore8(memory_offset$, 68)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(96, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 20)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := store_address(_address)\n\n  return(0, 0)\n\n}\ncase 0x0131222f {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n\n  let return_value$ := get_address()\n\n  let processed_return_value$ := msize()\nlet processed_return_value_init$ := processed_return_value$\nlet where_to_store_head$ := processed_return_value$\nlet where_to_store_head_init$ := where_to_store_head$\nswitch byte(0, mload(return_value$))\ncase 68 {}\ndefault {\n  let str1162032$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 27)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722072657475726e2076616c75650000000000)\noffset$ := add(offset$, 27)\n\n\n\nlet $err_message_ptr1162032 := add(1, str1162032$)\nlet $err_message_size1162032 := mload($err_message_ptr1162032)\n$err_message_ptr1162032 := add($err_message_ptr1162032, 32)\nrevert($err_message_ptr1162032, $err_message_size1162032)\n\n}\n\n\nreturn_value$ := add(return_value$, 1)\nmstore(where_to_store_head$, shr(96, mload(return_value$)))\nreturn_value$ := add(return_value$, 20)\nwhere_to_store_head$ := add(where_to_store_head$, 32)\n\nprocessed_return_value$ := add(processed_return_value$, 32)\nreturn(processed_return_value_init$, sub(processed_return_value$, processed_return_value_init$))\n\n}\ncase 0x2b074b6b {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _contract_symbol := memory_offset$\n  mstore8(memory_offset$, 1)\nmemory_offset$ := add(memory_offset$, 1)\n\nlet calldata_offset$$contract_symboloffset := add(init_calldata_offset$, calldataload(calldata_offset$))\ncalldata_offset$ := add(calldata_offset$, 32)\n\nlet calldata_offset$$contract_symbollength := calldataload(calldata_offset$$contract_symboloffset)\ncalldata_offset$$contract_symboloffset := add(calldata_offset$$contract_symboloffset, 32)\nmstore(memory_offset$, calldata_offset$$contract_symbollength)\nmemory_offset$ := add(memory_offset$, 32)\n\ncalldatacopy(memory_offset$, calldata_offset$$contract_symboloffset, calldata_offset$$contract_symbollength)\nmemory_offset$ := add(memory_offset$, calldata_offset$$contract_symbollength)\n\n\n  let return_value$ := store_contract_symbol(_contract_symbol)\n\n  return(0, 0)\n\n}\ncase 0x1b7232d8 {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n\n  let return_value$ := get_contract_symbol()\n\n  let processed_return_value$ := msize()\nlet processed_return_value_init$ := processed_return_value$\nlet where_to_store_head$ := processed_return_value$\nlet where_to_store_head_init$ := where_to_store_head$\nprocessed_return_value$ := add(processed_return_value$, 32)\nswitch byte(0, mload(return_value$))\ncase 1 {}\ndefault {\n  let str1287068$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 53)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722072657475726e2076616c75652c20657870)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x6563746564206279746573206f7220737472696e670000000000000000000000)\noffset$ := add(offset$, 21)\n\n\n\nlet $err_message_ptr1287068 := add(1, str1287068$)\nlet $err_message_size1287068 := mload($err_message_ptr1287068)\n$err_message_ptr1287068 := add($err_message_ptr1287068, 32)\nrevert($err_message_ptr1287068, $err_message_size1287068)\n\n}\n\n\nreturn_value$ := add(return_value$, 1)\n\nmstore(where_to_store_head$, sub(processed_return_value$, where_to_store_head_init$))\nwhere_to_store_head$ := add(where_to_store_head$, 32)\n\nlet size$ := mload(return_value$)\nreturn_value$ := add(return_value$, 32)\n\nmstore(processed_return_value$, size$)\nprocessed_return_value$ := add(processed_return_value$, 32)\n\nmcopy(processed_return_value$, return_value$, size$)\nprocessed_return_value$ := add(processed_return_value$, mul(32, add(1, sdiv(sub(size$, 1), 32))))\nreturn_value$ := add(return_value$, size$)\n\nreturn(processed_return_value_init$, sub(processed_return_value$, processed_return_value_init$))\n\n}\ncase 0x3ff84fd2 {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _key_a := memory_offset$\n  mstore8(memory_offset$, 85)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, calldataload(calldata_offset$))\nmemory_offset$ := add(memory_offset$, 16)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n  let _key_b := memory_offset$\n  mstore8(memory_offset$, 67)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(0, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 32)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n  let _value := memory_offset$\n  mstore8(memory_offset$, 37)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(240, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 2)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := store_mapping_test_int16(_key_a,_key_b,_value)\n\n  return(0, 0)\n\n}\ncase 0xf2283bff {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _key_a := memory_offset$\n  mstore8(memory_offset$, 85)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, calldataload(calldata_offset$))\nmemory_offset$ := add(memory_offset$, 16)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n  let _key_b := memory_offset$\n  mstore8(memory_offset$, 67)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(0, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 32)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := get_mapping_test_int16(_key_a,_key_b)\n\n  let processed_return_value$ := msize()\nlet processed_return_value_init$ := processed_return_value$\nlet where_to_store_head$ := processed_return_value$\nlet where_to_store_head_init$ := where_to_store_head$\nswitch byte(0, mload(return_value$))\ncase 37 {}\ndefault {\n  let str1129155$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 27)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722072657475726e2076616c75650000000000)\noffset$ := add(offset$, 27)\n\n\n\nlet $err_message_ptr1129155 := add(1, str1129155$)\nlet $err_message_size1129155 := mload($err_message_ptr1129155)\n$err_message_ptr1129155 := add($err_message_ptr1129155, 32)\nrevert($err_message_ptr1129155, $err_message_size1129155)\n\n}\n\n\nreturn_value$ := add(return_value$, 1)\nmstore(where_to_store_head$, sar(240, mload(return_value$)))\nreturn_value$ := add(return_value$, 2)\nwhere_to_store_head$ := add(where_to_store_head$, 32)\n\nprocessed_return_value$ := add(processed_return_value$, 32)\nreturn(processed_return_value_init$, sub(processed_return_value$, processed_return_value_init$))\n\n}\ncase 0x77c4d4d5 {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _key_a := memory_offset$\n  mstore8(memory_offset$, 37)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(240, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 2)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n  let _key_b := memory_offset$\n  mstore8(memory_offset$, 85)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, calldataload(calldata_offset$))\nmemory_offset$ := add(memory_offset$, 16)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n  let _value := memory_offset$\n  mstore8(memory_offset$, 85)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, calldataload(calldata_offset$))\nmemory_offset$ := add(memory_offset$, 16)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := store_mapping_test_bytes16(_key_a,_key_b,_value)\n\n  return(0, 0)\n\n}\ncase 0x72d071e8 {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _key_a := memory_offset$\n  mstore8(memory_offset$, 37)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(240, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 2)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n  let _key_b := memory_offset$\n  mstore8(memory_offset$, 85)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, calldataload(calldata_offset$))\nmemory_offset$ := add(memory_offset$, 16)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := get_mapping_test_bytes16(_key_a,_key_b)\n\n  let processed_return_value$ := msize()\nlet processed_return_value_init$ := processed_return_value$\nlet where_to_store_head$ := processed_return_value$\nlet where_to_store_head_init$ := where_to_store_head$\nswitch byte(0, mload(return_value$))\ncase 85 {}\ndefault {\n  let str1768946$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 44)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722072657475726e2076616c75652c20657870)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x65637465642042797465734e0000000000000000000000000000000000000000)\noffset$ := add(offset$, 12)\n\n\n\nlet $err_message_ptr1768946 := add(1, str1768946$)\nlet $err_message_size1768946 := mload($err_message_ptr1768946)\n$err_message_ptr1768946 := add($err_message_ptr1768946, 32)\nrevert($err_message_ptr1768946, $err_message_size1768946)\n\n}\n\n\nreturn_value$ := add(return_value$, 1)\n\nmstore(where_to_store_head$, shl(128, shr(128, mload(return_value$))))\nwhere_to_store_head$ := add(where_to_store_head$, 32)\n\nreturn_value$ := add(return_value$, 16)\n\nprocessed_return_value$ := add(processed_return_value$, 32)\nreturn(processed_return_value_init$, sub(processed_return_value$, processed_return_value_init$))\n\n}\ncase 0xd8d21ae3 {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _key_a := memory_offset$\n  mstore8(memory_offset$, 85)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, calldataload(calldata_offset$))\nmemory_offset$ := add(memory_offset$, 16)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n  let _key_b := memory_offset$\n  mstore8(memory_offset$, 67)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(0, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 32)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := increment_mapping_test_int16(_key_a,_key_b)\n\n  return(0, 0)\n\n}\ncase 0x9a24551f {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _key_a := memory_offset$\n  mstore8(memory_offset$, 85)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, calldataload(calldata_offset$))\nmemory_offset$ := add(memory_offset$, 16)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n  let _key_b := memory_offset$\n  mstore8(memory_offset$, 67)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(0, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 32)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := decrement_mapping_test_int16(_key_a,_key_b)\n\n  return(0, 0)\n\n}\ncase 0xec53a4a2 {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _id := memory_offset$\n  mstore8(memory_offset$, 35)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(0, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 32)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n  let _address := memory_offset$\n  mstore8(memory_offset$, 68)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(96, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 20)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := store_addresses(_id,_address)\n\n  return(0, 0)\n\n}\ncase 0xf1d83e3f {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _id := memory_offset$\n  mstore8(memory_offset$, 35)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(0, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 32)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := get_addresses(_id)\n\n  let processed_return_value$ := msize()\nlet processed_return_value_init$ := processed_return_value$\nlet where_to_store_head$ := processed_return_value$\nlet where_to_store_head_init$ := where_to_store_head$\nswitch byte(0, mload(return_value$))\ncase 68 {}\ndefault {\n  let str1229429$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 27)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722072657475726e2076616c75650000000000)\noffset$ := add(offset$, 27)\n\n\n\nlet $err_message_ptr1229429 := add(1, str1229429$)\nlet $err_message_size1229429 := mload($err_message_ptr1229429)\n$err_message_ptr1229429 := add($err_message_ptr1229429, 32)\nrevert($err_message_ptr1229429, $err_message_size1229429)\n\n}\n\n\nreturn_value$ := add(return_value$, 1)\nmstore(where_to_store_head$, shr(96, mload(return_value$)))\nreturn_value$ := add(return_value$, 20)\nwhere_to_store_head$ := add(where_to_store_head$, 32)\n\nprocessed_return_value$ := add(processed_return_value$, 32)\nreturn(processed_return_value_init$, sub(processed_return_value$, processed_return_value_init$))\n\n}\ncase 0xc350cb75 {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _tokenId := memory_offset$\n  mstore8(memory_offset$, 35)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(0, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 32)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n  let _tokenURI := memory_offset$\n  mstore8(memory_offset$, 1)\nmemory_offset$ := add(memory_offset$, 1)\n\nlet calldata_offset$$tokenURIoffset := add(init_calldata_offset$, calldataload(calldata_offset$))\ncalldata_offset$ := add(calldata_offset$, 32)\n\nlet calldata_offset$$tokenURIlength := calldataload(calldata_offset$$tokenURIoffset)\ncalldata_offset$$tokenURIoffset := add(calldata_offset$$tokenURIoffset, 32)\nmstore(memory_offset$, calldata_offset$$tokenURIlength)\nmemory_offset$ := add(memory_offset$, 32)\n\ncalldatacopy(memory_offset$, calldata_offset$$tokenURIoffset, calldata_offset$$tokenURIlength)\nmemory_offset$ := add(memory_offset$, calldata_offset$$tokenURIlength)\n\n\n  let return_value$ := set_tokenURIs(_tokenId,_tokenURI)\n\n  return(0, 0)\n\n}\ncase 0xca6875ec {\n  let offset$ := 0\n  let calldata_offset$ := 4\nlet init_calldata_offset$ := calldata_offset$\nlet memory_offset$ := 0\n  let _tokenId := memory_offset$\n  mstore8(memory_offset$, 35)\nmemory_offset$ := add(memory_offset$, 1)\nmstore(memory_offset$, shl(0, calldataload(calldata_offset$)))\nmemory_offset$ := add(memory_offset$, 32)\ncalldata_offset$ := add(calldata_offset$, 32)\n\n\n  let return_value$ := get_tokenURIs(_tokenId)\n\n  let processed_return_value$ := msize()\nlet processed_return_value_init$ := processed_return_value$\nlet where_to_store_head$ := processed_return_value$\nlet where_to_store_head_init$ := where_to_store_head$\nprocessed_return_value$ := add(processed_return_value$, 32)\nswitch byte(0, mload(return_value$))\ncase 1 {}\ndefault {\n  let str1114986$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 53)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722072657475726e2076616c75652c20657870)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x6563746564206279746573206f7220737472696e670000000000000000000000)\noffset$ := add(offset$, 21)\n\n\n\nlet $err_message_ptr1114986 := add(1, str1114986$)\nlet $err_message_size1114986 := mload($err_message_ptr1114986)\n$err_message_ptr1114986 := add($err_message_ptr1114986, 32)\nrevert($err_message_ptr1114986, $err_message_size1114986)\n\n}\n\n\nreturn_value$ := add(return_value$, 1)\n\nmstore(where_to_store_head$, sub(processed_return_value$, where_to_store_head_init$))\nwhere_to_store_head$ := add(where_to_store_head$, 32)\n\nlet size$ := mload(return_value$)\nreturn_value$ := add(return_value$, 32)\n\nmstore(processed_return_value$, size$)\nprocessed_return_value$ := add(processed_return_value$, 32)\n\nmcopy(processed_return_value$, return_value$, size$)\nprocessed_return_value$ := add(processed_return_value$, mul(32, add(1, sdiv(sub(size$, 1), 32))))\nreturn_value$ := add(return_value$, size$)\n\nreturn(processed_return_value_init$, sub(processed_return_value$, processed_return_value_init$))\n\n}\n\ndefault {revert(0, 0)}\n\n\n      function store_int_test($_int_test) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n\n\n\n  sstore(0xbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a, mload(add($_int_test, 1)))\n\n}\nfunction get_int_test() -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\nlet $storage_get$1$ := offset$\nmstore8(offset$, 67)\nmstore(add(1, offset$), sload(0xbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a))\n//offset$ := add(offset$, 1)\noffset$ := add(offset$, 33)\n\n\n  return_value_1$ := $storage_get$1$\n\n}\nfunction store_address($_address) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n\n\n\n  sstore(0x5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2, mload(add($_address, 1)))\n\n}\nfunction get_address() -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\nlet $storage_get$3$ := offset$\nmstore8(offset$, 68)\nmstore(add(1, offset$), sload(0x5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2))\n//offset$ := add(offset$, 1)\noffset$ := add(offset$, 21)\n\n\n  return_value_1$ := $storage_get$3$\n\n}\nfunction store_contract_symbol($_contract_symbol) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n  \n\nlet storage_i_4$ := $_contract_symbol\n\nswitch byte(0, mload(storage_i_4$))\ncase 1 {}\ndefault {\n  let str4$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 47)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x636f6e74726163745f73796d626f6c0000000000000000000000000000000000)\noffset$ := add(offset$, 15)\n\n\n\nlet $err_message_ptr4 := add(1, str4$)\nlet $err_message_size4 := mload($err_message_ptr4)\n$err_message_ptr4 := add($err_message_ptr4, 32)\nrevert($err_message_ptr4, $err_message_size4)\n\n}\n\n\nstorage_i_4$ := add(storage_i_4$, 1)\nlet slot_storage4$ := 0x69c322e3248a5dfc29d73c5b0553b0185a35cd5bb6386747517ef7e53b15e287\n\nlet str_size$4$ := mload(storage_i_4$)\nstorage_i_4$ := add(storage_i_4$, 32)\nlet storage_i_4$end := add(storage_i_4$, str_size$4$)\n\nsstore(slot_storage4$, str_size$4$)\nslot_storage4$ := add(slot_storage4$, 1)\n\n for { } lt(storage_i_4$, storage_i_4$end)\n {\n   storage_i_4$ := add(storage_i_4$, 32)\n   slot_storage4$ := add(slot_storage4$, 1)\n }\n {\n  sstore(slot_storage4$, mload(storage_i_4$))\n }\n\n\n}\nfunction get_contract_symbol() -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\nlet $storage_get$5$ := offset$\nlet slot_storage5$ := 0x69c322e3248a5dfc29d73c5b0553b0185a35cd5bb6386747517ef7e53b15e287\n\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\n\nlet str_size$5$ := sload(slot_storage5$)\nslot_storage5$ := add(slot_storage5$, 1)\nlet storage_i_5$end := add(slot_storage5$, add(1, sdiv(sub(str_size$5$, 1), 32)))\n\nmstore(offset$, str_size$5$)\noffset$ := add(offset$, 32)\n\n for { } lt(slot_storage5$, storage_i_5$end)\n {\n   offset$ := add(offset$, 32)\n   slot_storage5$ := add(slot_storage5$, 1)\n }\n {\n  mstore(offset$, sload(slot_storage5$))\n }\n\n\n  return_value_1$ := $storage_get$5$\n\n}\nfunction store_mapping_test_int16($_key_a, $_key_b, $_value) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n\n\nmstore(offset$, 4)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_key_a))\ncase 85 {}\ndefault {\n  let str6$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr6 := add(1, str6$)\nlet $err_message_size6 := mload($err_message_ptr6)\n$err_message_ptr6 := add($err_message_ptr6, 32)\nrevert($err_message_ptr6, $err_message_size6)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_a)))\noffset$ := add(offset$, 16)\nswitch byte(0, mload($_key_b))\ncase 67 {}\ndefault {\n  let str6$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr6 := add(1, str6$)\nlet $err_message_size6 := mload($err_message_ptr6)\n$err_message_ptr6 := add($err_message_ptr6, 32)\nrevert($err_message_ptr6, $err_message_size6)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_b)))\noffset$ := add(offset$, 32)\n\n\n\n  sstore(keccak256(sub(offset$, 80), 80), mload(add($_value, 1)))\n\n}\nfunction get_mapping_test_int16($_key_a, $_key_b) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n\nmstore(offset$, 4)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_key_a))\ncase 85 {}\ndefault {\n  let str7$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr7 := add(1, str7$)\nlet $err_message_size7 := mload($err_message_ptr7)\n$err_message_ptr7 := add($err_message_ptr7, 32)\nrevert($err_message_ptr7, $err_message_size7)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_a)))\noffset$ := add(offset$, 16)\nswitch byte(0, mload($_key_b))\ncase 67 {}\ndefault {\n  let str7$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr7 := add(1, str7$)\nlet $err_message_size7 := mload($err_message_ptr7)\n$err_message_ptr7 := add($err_message_ptr7, 32)\nrevert($err_message_ptr7, $err_message_size7)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_b)))\noffset$ := add(offset$, 32)\n\nlet $storage_get$7$ := offset$\nmstore8(offset$, 37)\nmstore(add(1, offset$), sload(keccak256(sub(offset$, 80), 80)))\n//offset$ := add(offset$, 1)\noffset$ := add(offset$, 3)\n\n\n  return_value_1$ := $storage_get$7$\n\n}\nfunction store_mapping_test_bytes16($_key_a, $_key_b, $_value) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n\n\nmstore(offset$, 5)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_key_a))\ncase 37 {}\ndefault {\n  let str8$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr8 := add(1, str8$)\nlet $err_message_size8 := mload($err_message_ptr8)\n$err_message_ptr8 := add($err_message_ptr8, 32)\nrevert($err_message_ptr8, $err_message_size8)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_a)))\noffset$ := add(offset$, 2)\nswitch byte(0, mload($_key_b))\ncase 85 {}\ndefault {\n  let str8$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr8 := add(1, str8$)\nlet $err_message_size8 := mload($err_message_ptr8)\n$err_message_ptr8 := add($err_message_ptr8, 32)\nrevert($err_message_ptr8, $err_message_size8)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_b)))\noffset$ := add(offset$, 16)\n\n\n\n  sstore(keccak256(sub(offset$, 50), 50), mload(add($_value, 1)))\n\n}\nfunction get_mapping_test_bytes16($_key_a, $_key_b) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n\nmstore(offset$, 5)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_key_a))\ncase 37 {}\ndefault {\n  let str9$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr9 := add(1, str9$)\nlet $err_message_size9 := mload($err_message_ptr9)\n$err_message_ptr9 := add($err_message_ptr9, 32)\nrevert($err_message_ptr9, $err_message_size9)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_a)))\noffset$ := add(offset$, 2)\nswitch byte(0, mload($_key_b))\ncase 85 {}\ndefault {\n  let str9$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr9 := add(1, str9$)\nlet $err_message_size9 := mload($err_message_ptr9)\n$err_message_ptr9 := add($err_message_ptr9, 32)\nrevert($err_message_ptr9, $err_message_size9)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_b)))\noffset$ := add(offset$, 16)\n\nlet $storage_get$9$ := offset$\nmstore8(offset$, 85)\nmstore(add(1, offset$), sload(keccak256(sub(offset$, 50), 50)))\n//offset$ := add(offset$, 1)\noffset$ := add(offset$, 17)\n\n\n  return_value_1$ := $storage_get$9$\n\n}\nfunction increment_mapping_test_int16($_key_a, $_key_b) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n\nmstore(offset$, 4)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_key_a))\ncase 85 {}\ndefault {\n  let str10$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr10 := add(1, str10$)\nlet $err_message_size10 := mload($err_message_ptr10)\n$err_message_ptr10 := add($err_message_ptr10, 32)\nrevert($err_message_ptr10, $err_message_size10)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_a)))\noffset$ := add(offset$, 16)\nswitch byte(0, mload($_key_b))\ncase 67 {}\ndefault {\n  let str10$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr10 := add(1, str10$)\nlet $err_message_size10 := mload($err_message_ptr10)\n$err_message_ptr10 := add($err_message_ptr10, 32)\nrevert($err_message_ptr10, $err_message_size10)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_b)))\noffset$ := add(offset$, 32)\n\nlet $storage_get$10$ := offset$\nmstore8(offset$, 37)\nmstore(add(1, offset$), sload(keccak256(sub(offset$, 80), 80)))\n//offset$ := add(offset$, 1)\noffset$ := add(offset$, 3)\n\nlet var11$ := offset$\nmstore8(offset$, 67)\noffset$ := add(offset$, 1)\nmstore(offset$, shl(0, 1))\noffset$ := add(offset$, 32)\n\nlet cast12$ := cast$(var11$, 37)\noffset$ := msize()\n\nlet add$13 := add$($storage_get$10$, cast12$)\noffset$ := msize()\n\n\n\n\nmstore(offset$, 4)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_key_a))\ncase 85 {}\ndefault {\n  let str14$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr14 := add(1, str14$)\nlet $err_message_size14 := mload($err_message_ptr14)\n$err_message_ptr14 := add($err_message_ptr14, 32)\nrevert($err_message_ptr14, $err_message_size14)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_a)))\noffset$ := add(offset$, 16)\nswitch byte(0, mload($_key_b))\ncase 67 {}\ndefault {\n  let str14$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr14 := add(1, str14$)\nlet $err_message_size14 := mload($err_message_ptr14)\n$err_message_ptr14 := add($err_message_ptr14, 32)\nrevert($err_message_ptr14, $err_message_size14)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_b)))\noffset$ := add(offset$, 32)\n\n\n\n  sstore(keccak256(sub(offset$, 80), 80), mload(add(add$13, 1)))\n\n}\nfunction decrement_mapping_test_int16($_key_a, $_key_b) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n\nmstore(offset$, 4)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_key_a))\ncase 85 {}\ndefault {\n  let str15$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr15 := add(1, str15$)\nlet $err_message_size15 := mload($err_message_ptr15)\n$err_message_ptr15 := add($err_message_ptr15, 32)\nrevert($err_message_ptr15, $err_message_size15)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_a)))\noffset$ := add(offset$, 16)\nswitch byte(0, mload($_key_b))\ncase 67 {}\ndefault {\n  let str15$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr15 := add(1, str15$)\nlet $err_message_size15 := mload($err_message_ptr15)\n$err_message_ptr15 := add($err_message_ptr15, 32)\nrevert($err_message_ptr15, $err_message_size15)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_b)))\noffset$ := add(offset$, 32)\n\nlet $storage_get$15$ := offset$\nmstore8(offset$, 37)\nmstore(add(1, offset$), sload(keccak256(sub(offset$, 80), 80)))\n//offset$ := add(offset$, 1)\noffset$ := add(offset$, 3)\n\nlet var16$ := offset$\nmstore8(offset$, 67)\noffset$ := add(offset$, 1)\nmstore(offset$, shl(0, 1))\noffset$ := add(offset$, 32)\n\nlet add$17 := sub$($storage_get$15$, var16$)\noffset$ := msize()\n\n\n\n\nmstore(offset$, 4)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_key_a))\ncase 85 {}\ndefault {\n  let str18$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr18 := add(1, str18$)\nlet $err_message_size18 := mload($err_message_ptr18)\n$err_message_ptr18 := add($err_message_ptr18, 32)\nrevert($err_message_ptr18, $err_message_size18)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_a)))\noffset$ := add(offset$, 16)\nswitch byte(0, mload($_key_b))\ncase 67 {}\ndefault {\n  let str18$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr18 := add(1, str18$)\nlet $err_message_size18 := mload($err_message_ptr18)\n$err_message_ptr18 := add($err_message_ptr18, 32)\nrevert($err_message_ptr18, $err_message_size18)\n\n}\n\n\nmstore(offset$, mload(add(1, $_key_b)))\noffset$ := add(offset$, 32)\n\n\n\n  sstore(keccak256(sub(offset$, 80), 80), mload(add(add$17, 1)))\n\n}\nfunction store_addresses($_id, $_address) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n\nmstore(offset$, 2)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_id))\ncase 35 {}\ndefault {\n  let str19$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr19 := add(1, str19$)\nlet $err_message_size19 := mload($err_message_ptr19)\n$err_message_ptr19 := add($err_message_ptr19, 32)\nrevert($err_message_ptr19, $err_message_size19)\n\n}\n\n\nmstore(offset$, mload(add(1, $_id)))\noffset$ := add(offset$, 32)\n\n\n\n  sstore(keccak256(sub(offset$, 64), 64), mload(add($_address, 1)))\n\n}\nfunction get_addresses($_id) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\nmstore(offset$, 2)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_id))\ncase 35 {}\ndefault {\n  let str20$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr20 := add(1, str20$)\nlet $err_message_size20 := mload($err_message_ptr20)\n$err_message_ptr20 := add($err_message_ptr20, 32)\nrevert($err_message_ptr20, $err_message_size20)\n\n}\n\n\nmstore(offset$, mload(add(1, $_id)))\noffset$ := add(offset$, 32)\n\nlet $storage_get$20$ := offset$\nmstore8(offset$, 68)\nmstore(add(1, offset$), sload(keccak256(sub(offset$, 64), 64)))\n//offset$ := add(offset$, 1)\noffset$ := add(offset$, 21)\n\n\n  return_value_1$ := $storage_get$20$\n\n}\nfunction set_tokenURIs($_tokenId, $_tokenURI) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\n  \n\nmstore(offset$, 6)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_tokenId))\ncase 35 {}\ndefault {\n  let str21$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr21 := add(1, str21$)\nlet $err_message_size21 := mload($err_message_ptr21)\n$err_message_ptr21 := add($err_message_ptr21, 32)\nrevert($err_message_ptr21, $err_message_size21)\n\n}\n\n\nmstore(offset$, mload(add(1, $_tokenId)))\noffset$ := add(offset$, 32)\n\nlet storage_i_21$ := $_tokenURI\n\nswitch byte(0, mload(storage_i_21$))\ncase 1 {}\ndefault {\n  let str21$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 41)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x746f6b656e555249730000000000000000000000000000000000000000000000)\noffset$ := add(offset$, 9)\n\n\n\nlet $err_message_ptr21 := add(1, str21$)\nlet $err_message_size21 := mload($err_message_ptr21)\n$err_message_ptr21 := add($err_message_ptr21, 32)\nrevert($err_message_ptr21, $err_message_size21)\n\n}\n\n\nstorage_i_21$ := add(storage_i_21$, 1)\nlet slot_storage21$ := keccak256(sub(offset$, 64), 64)\n\nlet str_size$21$ := mload(storage_i_21$)\nstorage_i_21$ := add(storage_i_21$, 32)\nlet storage_i_21$end := add(storage_i_21$, str_size$21$)\n\nsstore(slot_storage21$, str_size$21$)\nslot_storage21$ := add(slot_storage21$, 1)\n\n for { } lt(storage_i_21$, storage_i_21$end)\n {\n   storage_i_21$ := add(storage_i_21$, 32)\n   slot_storage21$ := add(slot_storage21$, 1)\n }\n {\n  sstore(slot_storage21$, mload(storage_i_21$))\n }\n\n\n}\nfunction get_tokenURIs($_tokenId) -> return_value_1$ {\n  let offset$ := msize()\n    \n\n  \n\nmstore(offset$, 6)\noffset$ := add(offset$, 32)\nswitch byte(0, mload($_tokenId))\ncase 35 {}\ndefault {\n  let str22$ := offset$\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\nmstore(offset$, 42)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x57726f6e67207479706520666f722073746f72616765207661726961626c6520)\noffset$ := add(offset$, 32)\nmstore(offset$, 0x616363657373206b657900000000000000000000000000000000000000000000)\noffset$ := add(offset$, 10)\n\n\n\nlet $err_message_ptr22 := add(1, str22$)\nlet $err_message_size22 := mload($err_message_ptr22)\n$err_message_ptr22 := add($err_message_ptr22, 32)\nrevert($err_message_ptr22, $err_message_size22)\n\n}\n\n\nmstore(offset$, mload(add(1, $_tokenId)))\noffset$ := add(offset$, 32)\n\nlet $storage_get$22$ := offset$\nlet slot_storage22$ := keccak256(sub(offset$, 64), 64)\n\nmstore8(offset$, 1)\noffset$ := add(offset$, 1)\n\nlet str_size$22$ := sload(slot_storage22$)\nslot_storage22$ := add(slot_storage22$, 1)\nlet storage_i_22$end := add(slot_storage22$, add(1, sdiv(sub(str_size$22$, 1), 32)))\n\nmstore(offset$, str_size$22$)\noffset$ := add(offset$, 32)\n\n for { } lt(slot_storage22$, storage_i_22$end)\n {\n   offset$ := add(offset$, 32)\n   slot_storage22$ := add(slot_storage22$, 1)\n }\n {\n  mstore(offset$, sload(slot_storage22$))\n }\n\n\n  return_value_1$ := $storage_get$22$\n\n}\n  function cast$(ptr_to_var$, desired_type$) -> new_pointer$ {\n    new_pointer$ := msize()\n    mstore8(new_pointer$, desired_type$)\n\n    let byte_size_new$ := type_to_byte_size$(desired_type$)\n\n    let loaded_value$, _ := load_var$(ptr_to_var$)\n\n    mstore(add(new_pointer$,1), shl(mul(8, sub(32, byte_size_new$)), loaded_value$))\n  }\n\nfunction type_to_byte_size$(type) -> size {\n  switch type\n  case 1 {size := 32}\n  case 2 {size := 1}\n  case 3 {size := 32}\n  case 68 {size := 20}\n  case 102 {size := 32}\n  default {\n    if lt(type, 36) {\n      size := sub(type, 3)\n      leave\n    }\n    if lt(type, 68) {\n      size := sub(type, 35)\n      leave\n    }\n    if lt(type, 102) {\n      size := sub(type, 69)\n      leave\n    }\n  }\n}\n\nfunction address_to_byte_size$(ptr) -> size {\n  let type := byte(0, mload(ptr))\n  size := type_to_byte_size$(type)\n}\n\n  function load_var$(ptr) -> return_value, type {\n    type := byte(0, mload(ptr))\n    let value := mload(add(ptr, 1))\n    let size := type_to_byte_size$(type)\n    return_value := shr(mul(sub(32, size), 8), value)\n  }\n\nfunction add$(_a$, _b$) -> return_value$ {\n  let a$, a_type$ := load_var$(_a$)\n  let b$, b_type$ := load_var$(_b$)\n  b$ := add(a$, b$)\n  let max_type$ := a_type$\n  if gt(b_type$, a_type$) {\n    max_type$ := b_type$\n  }\n  let offset$ := msize()\n  mstore8(offset$, max_type$)\n  mstore(add(offset$, 1), shl(mul(8, sub(32, type_to_byte_size$(max_type$))), b$))\n  return_value$ := offset$\n}\n\nfunction sub$(a, b) -> return_value$ {\n  let a$, a_type$ := load_var$(a)\n  let b$, b_type$ := load_var$(b)\n  b$ := sub(a$, b$)\n  let max_type := a_type$\n  if gt(b_type$, a_type$) {\n    max_type := b_type$\n  }\n  let offset$ := msize()\n  mstore8(offset$, max_type)\n  mstore(add(offset$, 1), shl(mul(8, sub(32, type_to_byte_size$(max_type))), b$))\n  return_value$ := offset$\n}\n\n    }\n  }\n}\n"}},"language":"Yul","settings":{"optimizer":{"enabled":true,"runs":1},"outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[]}}