function func_0x9447b3b3() {
                    let _34 := iszero(iszero(lt(calldatasize(), 0x44)))
                    require(_34)
                    let _35 := add(0x4, calldataload(add(0x4, 0x0)))
                    let _36 := iszero(iszero(gt(calldataload(_35), 0x5)))
                    require(_36)
                    let _37 := calldataload(_35)
                    let _38 := 0x0
                    let _39 := 0x0
                    let _40 := 0x0
                    let _41 := gt(_37, 0x5)
                    require(_41)
                    let _42 := iszero(_37)
                    if not(_42){
                        for {
                            let _45 := 0xa0
                            let _46 := 0x20
                            let _47 := add(_35, _46)
                            let _48 := 0x20
                            let _49 := mul(_38, _48)
                            let _50 := add(_47, _49)
                            let _51 := calldataload(_50)
                            let _52 := shr(_45, _51)
                            let _43 := iszero(_52)
                            let _53 := 0x1
                            let _44 := add(_53, _40)
                        }
                        not(iszero(_43))                        xor(_44, _37)
                        { }
                        {
                            _38 := _44
                            _48 := 0x20
                            _49 := mul(_38, _48)
                            _46 := 0x20
                            _47 := add(_35, _46)
                            _50 := add(_47, _49)
                            _51 := calldataload(_50)
                            _45 := 0xa0
                            _52 := shr(_45, _51)
                            _43 := iszero(_52)
                            let _54 := not(iszero(_43))
                            _39 := _44
                            mstore(add(add(0x40, 0x20), mul(_39, 0x20)), _51)
                            _40 := _44
                            _53 := 0x1
                            _44 := add(_53, _40)
                            _38 := _44
                            _39 := _44
                            _40 := _44
                            let _55 := xor(_44, _37)
                        }
                        revert(0x0, 0x0)
                    }
                    mstore(0x40, _37)
                    mstore(0x100, 0x0)
                    let _56 := 0x0
                    let _57 := 0x0
                    let _58 := mload(0x40)
                    let _59 := gt(_58, 0x5)
                    require(_59)
                    let _60 := iszero(_58)
                    if not(_60){
                        for {
                            let _63 := 0x100
                            let _64 := mload(_63)
                            let _65 := 0x5
                            let _61 := lt(_64, _65)
                            let _66 := 0x1
                            let _62 := add(_66, _57)
                        }
                        not(iszero(_61))                        xor(_62, _58)
                        { }
                        {
                            _56 := _62
                            let _67 := mload(add(add(0x40, 0x20), mul(_56, 0x20)))
                            mstore(0x1c0, _67)
                            let _68 := mload(0x1c0)
                            let _69 := iszero(iszero(eq(_68, 0x0)))
                            _63 := 0x100
                            _64 := mload(_63)
                            _65 := 0x5
                            _61 := lt(_64, _65)
                            let _70 := not(iszero(_61))
                            if _70{
                                revert(0x0, 0x0)
                                break
                            }
                            if not(_70){
                                let _71 := mload(0x1c0)
                                mstore(add(add(0x100, 0x20), mul(_64, 0x20)), _71)
                                mstore(0x100, add(_64, 0x1))
                            }
                            _57 := _62
                            _66 := 0x1
                            _62 := add(_66, _57)
                            _56 := _62
                            _57 := _62
                            let _72 := xor(_62, _58)
                        }
                    }
                    mstore(add(0x1c0, 0x0), 0x20)
                    let _73 := add(0x1c0, 0x20)
                    let _74 := mload(0x100)
                    mstore(_73, _74)
                    let _75 := 0x0
                    let _76 := 0x0
                    let _77 := gt(_74, 0x5)
                    require(_77)
                    let _78 := iszero(_74)
                    if not(_78){
                        for {
                            let _80 := 0x1
                            let _79 := add(_80, _76)
                        }
                        xor(_79, _74)
                        { }
                        {
                            _75 := _79
                            let _81 := mload(add(add(0x100, 0x20), mul(_75, 0x20)))
                            mstore(add(add(_73, 0x20), mul(_75, 0x20)), _81)
                            _76 := _79
                            _80 := 0x1
                            _79 := add(_80, _76)
                            _75 := _79
                            _76 := _79
                            let _82 := xor(_79, _74)
                        }
                    }
                    return(0x1c0, add(0x20, add(0x20, add(0x0, mul(_74, 0x20)))))
                }
object "Contract" {
    // This is the constructor code of the contract.
    code {
        // Deploy the contract
        datacopy(0, dataoffset("runtime"), datasize("runtime"))
        return(0, datasize("runtime"))
    }

    object "runtime" {
        code {
            // Protection against sending Ether
            if gt(callvalue(), 0) {
                revert(0, 0)
            }

            // Dispatcher
            switch selector()
            case 0x6d4ce63c {
                returnUint(get())
            }
            case 0x371303c0 {
                inc()
            }
            case 0xb3bcfa82 {
                dec()
            }
            default {
                revert(0, 0)
            }

            // ABI
            function get() -> counter {
                counter := sload(counterSlot())
            }

            function inc() {
                sstore(counterSlot(), add(get(), 1))
            }

            function dec() {
                sstore(counterSlot(), sub(get(), 1))
            }

            // Helpers
            function selector() -> s {
                s := div(calldataload(0), 0x100000000000000000000000000000000000000000000000000000000)
            }

            function returnUint(v) {
                mstore(0, v)
                return(0, 0x20)
            }

            // Slots
            function counterSlot() -> s { s := 0 }
        }
    }
  }

  {:ok,
  {:defmodule,
   [do: [line: 0, column: 23], end: [line: 23, column: 0], line: 0, column: 0],
   [
     {:__aliases__, [last: [line: 0, column: 14], line: 0, column: 10],
      [:ETH, :StorageA]},
     [
       do: {:__block__, [],
        [
          {:alias,
           [
             end_of_expression: [newlines: 1, line: 1, column: 12],
             line: 1,
             column: 2
           ],
           [
             {:__aliases__, [last: [line: 1, column: 8], line: 1, column: 8],
              [:Enum]}
           ]},
          {:alias,
           [
             end_of_expression: [newlines: 1, line: 2, column: 26],
             line: 2,
             column: 2
           ],
           [
             {:__aliases__, [last: [line: 2, column: 19], line: 2, column: 8],
              [:Blockchain, :Storage]}
           ]},
          {:alias,
           [
             end_of_expression: [newlines: 1, line: 3, column: 44],
             line: 3,
             column: 2
           ],
           [
             {{:., [line: 3, column: 18],
               [
                 {:__aliases__, [last: [line: 3, column: 8], line: 3, column: 8],
                  [:Blockchain]},
                 :{}
               ]}, [closing: [line: 3, column: 43], line: 3, column: 18],
              [
                {:__aliases__,
                 [last: [line: 3, column: 20], line: 3, column: 20], [:Storage]},
                {:__aliases__,
                 [last: [line: 3, column: 29], line: 3, column: 29], [:EVM]},
                {:__aliases__,
                 [last: [line: 3, column: 42], line: 3, column: 34],
                 [:Storage, :A]}
              ]}
           ]},
          {:alias,
           [
             end_of_expression: [newlines: 2, line: 4, column: 41],
             line: 4,
             column: 2
           ],
           [
             {:__aliases__, [last: [line: 4, column: 19], line: 4, column: 8],
              [:Blockchain, :EVM]},
             [
               as: {:__aliases__,
                [last: [line: 4, column: 28], line: 4, column: 28],
                [:BlockchainEVM]}
             ]
           ]},
          {:@,
           [
             end_of_expression: [newlines: 2, line: 6, column: 29],
             line: 6,
             column: 2
           ], [{:var_name, [line: 6, column: 3], [[type: :uint256]]}]},
          {:@,
           [
             end_of_expression: [newlines: 1, line: 8, column: 42],
             line: 8,
             column: 2
           ],
           [
             {:spec, [line: 8, column: 3],
              [
                {:"::", [line: 8, column: 36],
                 [
                   {:store, [closing: [line: 8, column: 34], line: 8, column: 8],
                    [
                      {:uint256,
                       [closing: [line: 8, column: 22], line: 8, column: 14],
                       []},
                      {:uint256,
                       [closing: [line: 8, column: 33], line: 8, column: 25], []}
                    ]},
                   nil
                 ]}
              ]}
           ]},
          {:def,
           [
             end_of_expression: [newlines: 2, line: 13, column: 5],
             do: [line: 9, column: 27],
             end: [line: 13, column: 2],
             line: 9,
             column: 2
           ],
           [
             {:store, [closing: [line: 9, column: 25], line: 9, column: 6],
              [
                {:num, [line: 9, column: 12], nil},
                {:fake_num, [line: 9, column: 17], nil}
              ]},
             [
               do: {:__block__, [],
                [
                  {:=,
                   [
                     end_of_expression: [newlines: 1, line: 10, column: 14],
                     line: 10,
                     column: 9
                   ], [{:test, [line: 10, column: 4], nil}, 123]},
                  {{:., [line: 11, column: 22],
                    [
                      {:__aliases__,
                       [last: [line: 11, column: 15], line: 11, column: 4],
                       [:Blockchain, :Storage]},
                      :store
                    ]},
                   [
                     end_of_expression: [newlines: 1, line: 11, column: 49],
                     closing: [line: 11, column: 48],
                     line: 11,
                     column: 23
                   ],
                   [
                     {:@, [line: 11, column: 29],
                      [{:var_name, [line: 11, column: 30], nil}]},
                     12332322
                   ]},
                  {{:., [line: 12, column: 11],
                    [
                      {:__aliases__,
                       [last: [line: 12, column: 4], line: 12, column: 4],
                       [:Storage]},
                      :store
                    ]}, [closing: [line: 12, column: 32], line: 12, column: 12],
                   [
                     {:@, [line: 12, column: 18],
                      [{:var_name, [line: 12, column: 19], nil}]},
                     {:num, [line: 12, column: 29], nil}
                   ]}
                ]}
             ]
           ]},
          {:@,
           [
             end_of_expression: [newlines: 1, line: 15, column: 49],
             line: 15,
             column: 2
           ],
           [
             {:spec, [line: 15, column: 3],
              [
                {:"::", [line: 15, column: 19],
                 [
                   {:retrieve,
                    [closing: [line: 15, column: 17], line: 15, column: 8], []},
                   {{:., [line: 15, column: 45],
                     [
                       {:__aliases__,
                        [last: [line: 15, column: 38], line: 15, column: 22],
                        [:Blockchain, :Type, :Uint256]},
                       :t
                     ]}, [closing: [line: 15, column: 48], line: 15, column: 46],
                    []}
                 ]}
              ]}
           ]},
          {:def,
           [
             end_of_expression: [newlines: 2, line: 18, column: 5],
             do: [line: 16, column: 17],
             end: [line: 18, column: 2],
             line: 16,
             column: 2
           ],
           [
             {:retrieve, [closing: [line: 16, column: 15], line: 16, column: 6],
              []},
             [
               do: {{:., [line: 17, column: 11],
                 [
                   {:__aliases__,
                    [last: [line: 17, column: 4], line: 17, column: 4],
                    [:Storage]},
                   :get
                 ]}, [closing: [line: 17, column: 25], line: 17, column: 12],
                [
                  {:@, [line: 17, column: 16],
                   [{:var_name, [line: 17, column: 17], nil}]}
                ]}
             ]
           ]},
          {:defp,
           [
             do: [line: 20, column: 16],
             end: [line: 22, column: 2],
             line: 20,
             column: 2
           ],
           [
             {:abc, [closing: [line: 20, column: 14], line: 20, column: 7],
              [{:qwe, [line: 20, column: 11], nil}]},
             [
               do: {:store,
                [closing: [line: 21, column: 13], line: 21, column: 4],
                [{:qwe, [line: 21, column: 10], nil}]}
             ]
           ]}
        ]}
     ]
   ]}}
